version: '3.5'


services:

  reverse-proxy:
    image: reverse-proxy
    ports:
      - 8888:80
    container_name: reverse-proxy
    build:
      context: ./src/reverse-proxy/
      dockerfile: dockerfile
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
    volumes:
      - ./src/reverse-proxy/conf.d/:/etc/nginx/conf.d
    command: /usr/sbin/nginx -g 'daemon off;' -c /etc/nginx/nginx.conf
    depends_on: 
      - web
      - app
      - ip

  web:
    image: vue-server
    ports:
      - 8000:8000
    container_name: vue-server
    build:
      context: ./src/frontend/
      dockerfile: Dockerfile
    privileged: true # 管理者権限の付与
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
    volumes:
      - ./src/frontend/:/app/
      - node_modules:/app/web_ui/node_modules
    tty: true # 起動状態を維持
    stdin_open: true # コンソール立ち上げ
    command: sh -c "echo serving vue server... && cd /app/web_ui/ && yarn run serve-docker"

  app:
    build:
      context: ./src/backend/
      dockerfile: dockerfile
    image: app
    container_name: backend
    expose: 
      - ${BACKEND_FLASK_PORT}
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - FLASK_PORT=${BACKEND_FLASK_PORT}
      - FLASK_CONFIG=${BACKEND_FLASK_CONFIG}
    volumes:
      - ./src/backend/:/work/
      - ./src/docker-airflow/logs:/src/airflow_logs
      - testbed_mount_volume_src:/testbed_mount_volume_dst:Z
      - ./logs/app:/work/logs
      - /var/run/docker.sock:/var/run/docker.sock:rw # dockerソケット
    command: 
      ['python', '-m', 'entrypoint', 'startserver']
    depends_on: 
      - psql

  psql:
    build:
      context: ./src/storage/psql_12
      dockerfile: dockerfile
    image: psql
    container_name: "psql"
    ports: 
      - "5432:5432"
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - POSTGRES_USER=${PSQL_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PSQL_POSTGRES_PASSWORD}
      - POSTGRES_DB=${PSQL_POSTGRES_DB}
      - DATABASE_HOST=${PSQL_DATABASE_HOST}
    volumes:
      - psql-data:/var/lib/postgresql/data

  pgadmin4:
    image: dpage/pgadmin4:4
    container_name: "pgadmin4"
    ports:
      - "5050:80"
    volumes:
      - pgadmin4-data:/var/lib/pgadmin
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    hostname: localhost
    depends_on:
      - psql

  ip:
    build:
      context: ./src/integration-provider
      dockerfile: dockerfile
    image: integration-provider
    container_name: ip
    ports: 
      - ${IP_FLASK_PORT}:${IP_FLASK_PORT}
    expose: 
      - ${IP_FLASK_PORT}
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - FLASK_PORT=${IP_FLASK_PORT}
      - FLASK_CONFIG=${IP_FLASK_CONFIG}
      - IP_ROOT_DAG_DIR_PATH=${IP_ROOT_DAG_DIR_PATH}
    volumes:
      - ./src/integration-provider:/work/
      - ./src/dag:/dag/
      - ./src/docker-airflow/logs:/src/airflow_logs
      - testbed_mount_volume_src:/testbed_mount_volume_dst:Z
      - /var/run/docker.sock:/var/run/docker.sock:rw # デプロイ用のdockerソケット
      - ./logs/ip:/work/logs
    command: 
      ['python', '-m', 'entrypoint', 'startserver']
    depends_on: 
      - psql
      - postgres10

  postgres10:
    image: postgres:10-alpine
    container_name: "postgres10"
    hostname: "postgres10"
    ports: 
      - "5433:5432"
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - POSTGRES_USER=${POSTGRES10_POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES10_POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES10_POSTGRES_DB}
      - DATABASE_HOST=${POSTGRES10_DATABASE_HOST}
    volumes:
      - postgres10-data:/var/lib/postgresql/data

  pgadmin44:
    image: dpage/pgadmin4:4
    container_name: "pgadmin44"
    ports:
      - "5051:80"
    volumes:
      - pgadmin44-data:/var/lib/pgadmin
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    hostname: "pgadmin44"
    depends_on:
      - postgres10

  airflow:
    build:
      context: ./src/docker-airflow
      dockerfile: Dockerfile
    container_name: "airflow"
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - LOAD_EX=n
      - EXECUTOR=Local
      - POSTGRES_USER=${POSTGRES10_POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES10_POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES10_POSTGRES_DB}
      - POSTGRES_HOST=${AIRFLOW_DATABASE_HOST}
      - POSTGRES_PORT=5432
    volumes:
      - ./src/docker-airflow/dags:/usr/local/airflow/dags
      - ./src/docker-airflow/logs:/usr/local/airflow/logs
      - ./src/docker-airflow/plugins:/usr/local/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - testbed_mount_volume_src:/testbed_mount_volume_dst:Z
    ports:
      - "8180:8080"
    command: webserver
    depends_on:
      - postgres10

  registry:
    container_name: registry
    image: registry:2.7.1
    hostname: local-registry
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
    ports:
      - 5500:5000
    volumes:
      - registry-data

  ait-installer:
    build:
      context: ./src/ait-installer
      dockerfile: dockerfile
    container_name: "ait-installer"
    extra_hosts:
      # refs: https://qiita.com/skobaken/items/03a8b9d0e443745862ac
      - "host.docker.internal:host-gateway"
    depends_on: 
      - app
      - ip

volumes:
  node_modules: {}
  psql-data:
    driver: local
  pgadmin4-data:
    driver: local
  testbed_mount_volume_src:
    driver: local
    name: testbed_mount_volume_src
  postgres10-data:
    driver: local
  pgadmin44-data:
    driver: local
  registry-data:
    driver: local